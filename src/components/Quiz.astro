---
interface Props {
  questions: {
    text: string;
    options: {
      text: string;
      correct: boolean;
    }[];
  }[];
}

const { questions } = Astro.props;
---

<div class="mt-8 space-y-8">
  <h2 class="text-xl font-bold mb-4">Knowledge Check</h2>
  <div class="space-y-8" id="quiz-container">
    {questions.map((question, qIndex) => (
      <div class="bg-background-alt p-6 rounded-lg shadow-md">
        <p class="text-lg mb-4">{qIndex + 1}. {question.text}</p>
        <div class="space-y-2">
          {question.options.map((option, oIndex) => (
            <label class="flex items-start space-x-3 p-3 rounded hover:bg-background cursor-pointer">
              <input
                type="radio"
                name={`question-${qIndex}`}
                value={oIndex}
                data-question={qIndex}
                class="mt-1 quiz-option"
              />
              <span>{option.text}</span>
            </label>
          ))}
        </div>
        <div class="mt-4 hidden feedback">
          <p class="text-green-600 dark:text-green-400 font-medium hidden correct-feedback">
            ✓ Correct! Well done!
          </p>
          <p class="text-red-600 dark:text-red-400 font-medium hidden incorrect-feedback">
            ✗ Incorrect. Try again!
          </p>
        </div>
      </div>
    ))}
    <button
      type="button"
      id="check-answers"
      class="px-6 py-2 bg-primary text-text-inverse rounded-lg hover:bg-primary-dark transition-colors font-medium"
    >
      Check Answers
    </button>
  </div>
</div>

<script define:vars={{ questions }}>
  import { QuizState } from '../lib/quiz';

  // Initialize quiz when the page loads
  new QuizState(questions);

  // Re-initialize when the page content updates (for client-side navigation)
  document.addEventListener('astro:page-load', () => {
    new QuizState(questions);
  });
</script>